#!/usr/bin/env python

### Command line script that runs the purdy library with a single file

import argparse

from __init__ import __version__
from ui import State, purdy_window

# =============================================================================
# Main
# =============================================================================

if __name__ == '__main__':
    # define command line arguments
    parser = argparse.ArgumentParser(description=('Displays a highlighted '
        'version of python text to the screen as if it is being typed'))
    parser.add_argument('filename', help=('Name of file containing python to '
        'parse'))
    parser.add_argument('-c', '--continuous', action='store_true', 
        help=('Instead of prentending to type like a human, just dump the file '
        'to the screen'))
    parser.add_argument('--variance', type=int, default=30,
        help=('To make the typing look more real there is a variance in the '
            'delay between keystrokes. This value, in milliseconds is how '
            'much to go over or under the delay by. Defaults to +/- 30ms'))
    parser.add_argument('--version', action='version', 
        version='%(prog)s {version}'.format(version=__version__ ))

    # set up the typing_delay / words_per_minute options
    delay = 0.130
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-d', '--delay', type=int, 
        help=('Amount of time between each letter when in typewriter mode. '
            'Specified in milliseconds. Defaults to %s' % (delay * 1000)))
    group.add_argument('-w', '--wpm', type=int, help=('Number of words per '
        'minute that the typing speed should look like'))

    args = parser.parse_args()

    # --- setup our parms based on our args

    # calulcate our delay
    if args.delay:
        delay = args.delay / 1000
    elif args.wpm:
        # in typing class, wpm calc is based on 5 letter words, change number of
        # words into letters per second then invert to get delay
        delay = 1 / (5 * args.wpm  / 60)

    state = State.WAITING
    if args.continuous:
        state = State.CONTINUOUS

    # --- Read our file and build our widgets
    # get file contents and use urwid to display
    with open(args.filename) as f:
        contents = f.read()

    purdy_window(delay, args.variance, state, contents)
